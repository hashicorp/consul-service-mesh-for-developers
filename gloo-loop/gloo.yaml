apiVersion: v1
kind: Namespace
metadata:  
  name: gloo-system  
---
# Source: gloo-ee/templates/20-extauth-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: gloo
    gloo: extauth
  name: extauth-signing-key
  namespace: gloo-system
type: Opaque
data:
  signing-key: "V2gyZmV1UmZ4eQ==" # if signingKey.key# if not existingsecret # if standalone or sidecar # enabled

---
# Source: gloo-ee/templates/30-license-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: gloo
    gloo: license
  name: license
  namespace: gloo-system
type: Opaque
data:
  license-key: ""
---


---
# Source: gloo-ee/charts/gloo/templates/2-gloo-usage-configmap.yaml
# use this config map to record envoy usage stats
apiVersion: v1
kind: ConfigMap
metadata:
  name: gloo-usage
  namespace: gloo-system
  labels:
    app: gloo
    gloo: gloo-usage
data:

---
# Source: gloo-ee/charts/gloo/templates/9-gateway-proxy-configmap.yaml

---
# config_map
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-proxy-v2-envoy-config
  namespace: gloo-system
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy-v2
data:

  envoy.yaml: |
    node:
      cluster: gateway
      id: "{{.PodName}}.{{.PodNamespace}}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{.PodNamespace}}~gateway-proxy-v2"
    stats_sinks:
      - name: envoy.metrics_service
        config:
          grpc_service:
            envoy_grpc: {cluster_name: gloo.gloo-system.svc.cluster.local:9966}
    static_resources:
      listeners: # if or ($spec.stats) ($spec.readConfig)
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.http_connection_manager
                  config:
                    codec_type: auto
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: "/stats/prometheus"
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.router
                        config: {} # if $spec.stats # if $spec.readConfig
      clusters:
      - name: gloo.gloo-system.svc.cluster.local:9977
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.gloo-system.svc.cluster.local:9977
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.gloo-system.svc.cluster.local
                    port_value: 9977
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: gloo.gloo-system.svc.cluster.local:9966
        alt_stat_name: metrics_cluster
        connect_timeout: 5.000s
        load_assignment:
            cluster_name: gloo.gloo-system.svc.cluster.local:9966
            endpoints:
            - lb_endpoints:
              - endpoint:
                    address:
                        socket_address:
                            address: gloo.gloo-system.svc.cluster.local
                            port_value: 9966
        http2_protocol_options: {}
        type: STRICT_DNS # if .Values.accessLogger.enabled # if $spec.tracing
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000 # if or ($spec.stats) ($spec.readConfig) # if $spec.tracing
    dynamic_resources:
      ads_config:
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: gloo.gloo-system.svc.cluster.local:9977}
      cds_config:
        ads: {}
      lds_config:
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000 # if (empty $spec.configMap.data) ## allows full custom # range $name, $spec := .Values.gatewayProxies# if .Values.gateway.enabled

 
---
# Source: gloo-ee/charts/gloo/templates/2-gloo-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gloo
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
  name: gloo
  namespace: gloo-system

---
# Source: gloo-ee/charts/gloo/templates/3-discovery-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: discovery
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
  name: discovery
  namespace: gloo-system
---
# Source: gloo-ee/charts/gloo/templates/5-gateway-service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
  name: gateway
  namespace: gloo-system
---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
  name: gateway-certgen
  namespace: gloo-system




---
# Source: gloo-ee/charts/gloo/templates/8-gateway-proxy-service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
  name: gateway-proxy
  namespace: gloo-system



---
# Source: gloo-ee/templates/32-apiserver-service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: apiserver-ui
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
  name: apiserver-ui
  namespace: gloo-system # .Values.apiServer.enable


---
# Source: gloo-ee/charts/gloo/templates/100-gloo-crds.yaml

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: settings.gloo.solo.io
  annotations:
    "helm.sh/hook": crd-install
  labels:
    gloo: settings
spec:
  group: gloo.solo.io
  names:
    kind: Settings
    listKind: SettingsList
    plural: settings
    shortNames:
      - st
  scope: Namespaced
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: gateways.gateway.solo.io.v2
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: gateway.solo.io.v2
  names:
    kind: Gateway
    listKind: GatewayList
    plural: gateways
    shortNames:
      - gw
    singular: gateway
  scope: Namespaced
  version: v2
  versions:
    - name: v2
      storage: true
      served: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: virtualservices.gateway.solo.io
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: gateway.solo.io
  names:
    kind: VirtualService
    listKind: VirtualServiceList
    plural: virtualservices
    shortNames:
      - vs
    singular: virtualservice
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: routetables.gateway.solo.io
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: gateway.solo.io
  names:
    kind: RouteTable
    listKind: RouteTableList
    plural: routetables
    shortNames:
      - rt
    singular: routetable
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: proxies.gloo.solo.io
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: gloo.solo.io
  names:
    kind: Proxy
    listKind: ProxyList
    plural: proxies
    shortNames:
      - px
    singular: proxy
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: upstreams.gloo.solo.io
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: gloo.solo.io
  names:
    kind: Upstream
    listKind: UpstreamList
    plural: upstreams
    shortNames:
      - us
    singular: upstream
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: upstreamgroups.gloo.solo.io
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: gloo.solo.io
  names:
    kind: UpstreamGroup
    listKind: UpstreamGroupList
    plural: upstreamgroups
    shortNames:
      - ug
    singular: upstreamgroup
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: authconfigs.enterprise.gloo.solo.io
  annotations:
    "helm.sh/hook": crd-install
spec:
  group: enterprise.gloo.solo.io
  names:
    kind: AuthConfig
    listKind: AuthConfigList
    plural: authconfigs
    shortNames:
    - ac
    singular: authconfig
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
---
# Source: gloo-ee/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: kube-resource-watcher
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "10"
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "endpoints", "configmaps", "namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-upstream-mutator
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "10"
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["upstreams"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-resource-reader
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "10"
rules:
- apiGroups: ["gloo.solo.io", "enterprise.gloo.solo.io"]
  resources: ["upstreams","upstreamgroups", "proxies", "authconfigs"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""] # get/update on configmaps for recording envoy metrics
  resources: ["configmaps"]
  verbs: ["get", "update"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: settings-user
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "10"
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["settings"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-resource-mutator
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "10"
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["proxies"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gateway-resource-reader
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "10"
rules:
- apiGroups: ["gateway.solo.io"]
  resources: ["virtualservices", "routetables"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["gateway.solo.io"]
  resources: ["gateways"]
  # update is needed for status updates, create for creating the default ones.
  verbs: ["get", "list", "watch", "create", "update"]
- apiGroups: ["gateway.solo.io.v2"]
  resources: ["gateways"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create", "update"]
---
# this role requires access to cluster-scoped resources
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-gateway-secret-create-vwc-update-gloo-system
    labels:
        app: gloo
        gloo: rbac
    annotations:
      "helm.sh/hook": "pre-install"
      "helm.sh/hook-weight": "5"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["get", "update"]

---
# Source: gloo-ee/templates/36-apiserver-role.yaml

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: apiserver-ui
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "10"
rules:
# Group 1: these rules apply to read-only and enterprise apiserver
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps", "namespaces", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["artifacts", "upstreams", "upstreamgroups", "proxies", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["settings"]
    verbs: ["get", "list", "watch", "create"]
  - apiGroups: ["gateway.solo.io.v2"]
    resources: ["gateways"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["gateway.solo.io"]
    resources: ["virtualservices", "routetables"]
    verbs: ["get", "list", "watch"]
# Group 2: these rules only apply to the enterprise apiserver (enables mutations)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["artifacts", "settings", "upstreams", "upstreamgroups", "proxies", "secrets"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["gateway.solo.io.v2"]
    resources: ["gateways"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["gateway.solo.io"]
    resources: ["virtualservices", "routetables"]
    verbs: ["create", "update", "delete"] # .Values.apiServer.enterprise # .Values.apiServer.enable



---
# Source: gloo-ee/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-resource-watcher-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: kube-resource-watcher
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-upstream-mutator-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-upstream-mutator
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-resource-reader-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-resource-reader
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: settings-user-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
- kind: ServiceAccount
  name: gateway
  namespace: gloo-system
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: settings-user
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-resource-mutator-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-resource-mutator
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gateway-resource-reader-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gateway-resource-reader
  apiGroup: rbac.authorization.k8s.io
---
# this role requires access to cluster-scoped resources
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
subjects:
- kind: ServiceAccount
  name: gateway-certgen
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-gateway-secret-create-vwc-update-gloo-system
  apiGroup: rbac.authorization.k8s.io



---
# Source: gloo-ee/templates/35-apiserver-rolebinding.yaml

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: apiserver-ui-role-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
  - kind: ServiceAccount
    name: apiserver-ui
    namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: apiserver-ui
  apiGroup: rbac.authorization.k8s.io # .Values.apiServer.enable # glooRbac.create

---
# Source: gloo-ee/templates/61-rolebinding-settings-user.yaml

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: glooe-settings-user-role-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "15"
subjects:
  - kind: ServiceAccount
    name: observability
    namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: settings-user
  apiGroup: rbac.authorization.k8s.io # if defaultInstallation or customGrafana # if glooRbac.create


---
# Source: gloo-ee/charts/gloo/templates/2-gloo-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: gloo-system
spec:
  ports:
  - name: grpc-xds
    port: 9977
    protocol: TCP
  - name: grpc-validation
    port: 9988
    protocol: TCP
  - name: metrics-grpc
    port: 9966
    protocol: TCP
  selector:
    gloo: gloo

---
# Source: gloo-ee/charts/gloo/templates/5-gateway-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: gloo-system
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    # this should map to projects/gateway/pkg/defaults.ValidationWebhookBindPort
    targetPort: 8443
  selector:
    gloo: gateway

---
# Source: gloo-ee/charts/gloo/templates/8-gateway-proxy-service.yaml

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy-v2
  name: gateway-proxy-v2
  namespace: gloo-system
  annotations:
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8081"
    prometheus.io/scrape: "true"
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  selector:
    gateway-proxy-id: gateway-proxy-v2
    gateway-proxy: live
  type: LoadBalancer


---
# Source: gloo-ee/templates/0-redis-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: redis
  name: redis
  namespace: gloo-system
spec:
  ports:
    - name: redis
      port: 6379
      protocol: TCP
  selector:
    gloo: redis
---
# Source: gloo-ee/templates/22-extauth-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: extauth
  name: extauth
  namespace: gloo-system
spec:
  ports:
  - name: grpc
    port: 8083
    protocol: TCP
  selector:
    gloo: extauth # enabled

---
# Source: gloo-ee/templates/3-rate-limit-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: rate-limit
  name: rate-limit
  namespace: gloo-system
spec:
  ports:
  - name: grpc
    port: 18081
    protocol: TCP
  selector:
    gloo: rate-limit
---
# Source: gloo-ee/templates/34-apiserver-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: apiserver-ui
  namespace: gloo-system
  labels:
    app: gloo
    gloo: apiserver-ui
spec:
  ports:
    - name: static
      port: 8080
      protocol: TCP
  selector:
    gloo: apiserver-ui
  type: NodePort # .Values.apiServer.enable

---
# Source: gloo-ee/charts/gloo/templates/1-gloo-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gloo
  template:
    metadata:
      labels:
        gloo: gloo
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gloo
      containers:
      - image: quay.io/solo-io/gloo-ee:kubecon2019-workshop
        imagePullPolicy: IfNotPresent
        name: gloo
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 9977
          name: grpc-xds
          protocol: TCP
        - containerPort: 9988
          name: grpc-validation
          protocol: TCP
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
        readinessProbe:
          tcpSocket:
            port: 9977
          initialDelaySeconds: 1
          periodSeconds: 2
          failureThreshold: 10
      imagePullSecrets:
        - name: solo-io-readerbot-pull-secret

---
# Source: gloo-ee/charts/gloo/templates/3-discovery-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: discovery
  template:
    metadata:
      labels:
        gloo: discovery
    spec:
      serviceAccountName: discovery
      containers:
      - image: quay.io/solo-io/discovery:0.20.13
        imagePullPolicy: IfNotPresent
        name: discovery
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

---
# Source: gloo-ee/charts/gloo/templates/5-gateway-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway-v2
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway
  template:
    metadata:
      labels:
        gloo: gateway
    spec:
      serviceAccountName: gateway
      containers:
      - image: quay.io/solo-io/gateway:0.20.13
        imagePullPolicy: IfNotPresent
        name: gateway
        ports:
          - containerPort: 8443
            name: https
            protocol: TCP

        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: VALIDATION_MUST_START
            value: "true"
        volumeMounts:
          - mountPath: /etc/gateway/validation-certs
            name: validation-certs
        readinessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 1
          periodSeconds: 2
          failureThreshold: 10
      volumes:
        - name: validation-certs
          secret:
            defaultMode: 420
            secretName: gateway-validation-certs
---
# Source: gloo-ee/charts/gloo/templates/7-gateway-proxy-deployment.yaml
# if envoySidecar
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy-v2
  name: gateway-proxy-v2
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway-proxy
      gateway-proxy-id: gateway-proxy-v2
  template:
    metadata:
      labels:
        gloo: gateway-proxy
        gateway-proxy-id: gateway-proxy-v2
        gateway-proxy: live

      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gateway-proxy
      containers:
      - args: ["--disable-hot-restart"]
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/solo-io/gloo-ee-envoy-wrapper:kubecon2019-workshop
        imagePullPolicy: IfNotPresent
        name: gateway-proxy-v2
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
      imagePullSecrets:
        - name: solo-io-readerbot-pull-secret
      volumes:
      - configMap:
          name: gateway-proxy-v2-envoy-config
        name: envoy-config


---
# Source: gloo-ee/templates/1-redis-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: redis
  name: redis
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: redis
  template:
    metadata:
      labels:
        gloo: redis
    spec:
      containers:
        - image: docker.io/redis:5
          imagePullPolicy:  IfNotPresent
          name: redis
          ports:
            - containerPort: 6379
          env:
            - name: MASTER
              value: "true"
          volumeMounts:
            - mountPath: /redis-master-data
              name: data
      volumes:
        - name: data
          emptyDir: {}
---
# Source: gloo-ee/templates/2-rate-limit-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: rate-limit
  name: rate-limit
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: rate-limit
  template:
    metadata:
      labels:
        gloo: rate-limit
    spec:
      containers:
        - image: quay.io/solo-io/rate-limit-ee:0.20.8
          imagePullPolicy: IfNotPresent
          name: rate-limit
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GLOO_ADDRESS
              value: gloo:9977
            - name: SERVICE_NAME
              value:  # .Values.rateLimit.deployment.dynamodb.secretName
            - name: REDIS_URL
              value: redis:6379
            - name: REDIS_SOCKET_TYPE
              value: tcp # .Values.rateLimit.deployment.dynamodb.secretName
      imagePullSecrets:
        - name: solo-io-readerbot-pull-secret
---
# Source: gloo-ee/templates/21-extauth-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: extauth
  name: extauth
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: extauth
  template:
    metadata:
      labels:
        gloo: extauth
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true" # $extAuth.deployment.stats
    spec: # $extAuth.plugins
      containers:
      - image: quay.io/solo-io/extauth-ee:0.20.8
        imagePullPolicy: IfNotPresent
        name: extauth
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SERVICE_NAME
            value: "ext-auth"
          - name: GLOO_ADDRESS
            value: gloo:9977
          - name: SIGNING_KEY
            valueFrom:
              secretKeyRef:
                name: extauth-signing-key
                key: signing-key
          - name: SERVER_PORT
            value: "8083"
          - name: USER_ID_HEADER
            value: "x-user-id"
          - name: START_STATS_SERVER
            value: "true"
      imagePullSecrets:
        - name: solo-io-readerbot-pull-secret
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    gloo: gateway-proxy
                topologyKey: kubernetes.io/hostname # .Values.global.extensions.extAuth.standaloneDeployment # enabled

---
# Source: gloo-ee/templates/33-apiserver-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: gloo-system
  labels:
    app: gloo
    gloo: apiserver-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gloo
      gloo: apiserver-ui
  template:
    metadata:
      labels:
        app: gloo
        gloo: apiserver-ui
    spec:
      serviceAccountName: apiserver-ui
      containers:
        - name: apiserver-ui
          image: quay.io/solo-io/grpcserver-ui:0.20.8
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: empty-cache
              mountPath: /var/cache/nginx
            - name: empty-run
              mountPath: /var/run
          ports:
            - name: static
              containerPort: 8080
              protocol: TCP
        - name: apiserver
          image: quay.io/solo-io/grpcserver-ee:0.20.8
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GRPC_PORT
              value: '10101' # stats
            - name: NO_AUTH
              value: "1"
            - name: GLOO_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: license
                  key: license-key # .Values.apiServer.enterprise
          ports:
            - name: grpcport
              containerPort: 10101
              protocol: TCP
        - name: gloo-grpcserver-envoy
          image: quay.io/solo-io/grpcserver-envoy:0.20.8
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            periodSeconds: 10
            initialDelaySeconds: 5
      volumes:
        - name: empty-cache
          emptyDir: {}
        - name: empty-run
          emptyDir: {}
      imagePullSecrets:
        - name: solo-io-readerbot-pull-secret # .Values.apiServer.enable

---
# Source: gloo-ee/charts/gloo/templates/6.5-gateway-certgen-job.yaml

apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: gloo
    gloo: gateway-certgen
  name: gateway-certgen
  namespace: gloo-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
spec:
  template:
    metadata:
      labels:
        gloo: gateway-certgen
    spec:
      serviceAccountName: gateway-certgen
      containers:
        - image: quay.io/solo-io/certgen:0.20.13
          imagePullPolicy: IfNotPresent
          name: certgen
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - "--secret-name=gateway-validation-certs"
            - "--svc-name=gateway"
            - "--validating-webhook-configuration-name=gloo-gateway-validation-webhook-gloo-system"
      restartPolicy: OnFailure

---
# Source: gloo-ee/charts/gloo/templates/8-default-gateways.yaml



---
apiVersion: gateway.solo.io.v2/v2
kind: Gateway
metadata:
  name: gateway-proxy-v2
  namespace: gloo-system
  labels:
    app: gloo
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
spec:
  bindAddress: "::"
  bindPort: 8080
  httpGateway: {}
  useProxyProto: false
  ssl: false
  proxyNames:
  - gateway-proxy-v2

---

apiVersion: gateway.solo.io.v2/v2
kind: Gateway
metadata:
  name: gateway-proxy-v2-ssl
  namespace: gloo-system
  labels:
    app: gloo
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "5"
spec:
  bindAddress: "::"
  bindPort: 8443
  httpGateway: {}
  useProxyProto: false
  ssl: true
  proxyNames:
  - gateway-proxy-v2
---
# Source: gloo-ee/templates/40-settings.yaml


apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  labels:
    app: gloo
    gloo: settings
  name: default
  namespace: gloo-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5"
spec:
  gloo:
    xdsBindAddr: "0.0.0.0:9977"
  discoveryNamespace: gloo-system
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s
  gateway:
    validation:
      proxyValidationServerAddr: "gloo:9988"
      alwaysAccept: true

  extensions:
    configs:
      extauth:
        extauthzServerRef:
          # arbitrarily default to the standalone deployment name even if we're using both
          name: extauth
          namespace: gloo-system
      rate-limit:
        ratelimit_server_ref:
          name: rate-limit
          namespace: gloo-system

---
# Source: gloo-ee/charts/gloo/templates/0-namespace.yaml

---
# Source: gloo-ee/charts/gloo/templates/10-ingress-deployment.yaml


---
# Source: gloo-ee/charts/gloo/templates/11-ingress-proxy-deployment.yaml

---
# Source: gloo-ee/charts/gloo/templates/12-ingress-proxy-configmap.yaml

---
# Source: gloo-ee/charts/gloo/templates/13-ingress-proxy-service.yaml

---
# Source: gloo-ee/charts/gloo/templates/14-clusteringress-proxy-deployment.yaml


---
# Source: gloo-ee/charts/gloo/templates/15-clusteringress-proxy-configmap.yaml

---
# Source: gloo-ee/charts/gloo/templates/16-clusteringress-proxy-service.yaml


---
# Source: gloo-ee/charts/gloo/templates/18-settings.yaml


---
# Source: gloo-ee/charts/gloo/templates/21-namespace-clusterrole-ingress.yaml

---
# Source: gloo-ee/charts/gloo/templates/22-namespace-clusterrole-knative.yaml

---
# Source: gloo-ee/charts/gloo/templates/24-namespace-clusterrolebinding-ingress.yaml

---
# Source: gloo-ee/charts/gloo/templates/25-namespace-clusterrolebinding-knative.yaml

---
# Source: gloo-ee/charts/gloo/templates/26-knative-external-proxy-deployment.yaml


---
# Source: gloo-ee/charts/gloo/templates/27-knative-external-proxy-configmap.yaml

---
# Source: gloo-ee/charts/gloo/templates/28-knative-external-proxy-service.yaml

---
# Source: gloo-ee/charts/gloo/templates/29-knative-internal-proxy-deployment.yaml


---
# Source: gloo-ee/charts/gloo/templates/30-knative-internal-proxy-configmap.yaml

---
# Source: gloo-ee/charts/gloo/templates/31-knative-internal-proxy-service.yaml

---
# Source: gloo-ee/charts/gloo/templates/6-access-logger-deployment.yaml

---
# Source: gloo-ee/charts/gloo/templates/6-access-logger-service.yaml


---
# Source: gloo-ee/charts/gloo/templates/6.5-gateway-conversion-job.yaml


---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-configmap.yaml

---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-deployment.yaml


---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-ingress.yaml

---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-networkpolicy.yaml

---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-pvc.yaml

---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-service-headless.yaml


---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-service.yaml


---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-serviceaccount.yaml

---
# Source: gloo-ee/charts/prometheus/templates/alertmanager-statefulset.yaml


---
# Source: gloo-ee/charts/prometheus/templates/kube-state-metrics-networkpolicy.yaml

---
# Source: gloo-ee/charts/prometheus/templates/node-exporter-daemonset.yaml

---
# Source: gloo-ee/charts/prometheus/templates/node-exporter-podsecuritypolicy.yaml


---
# Source: gloo-ee/charts/prometheus/templates/node-exporter-role.yaml


---
# Source: gloo-ee/charts/prometheus/templates/node-exporter-rolebinding.yaml


---
# Source: gloo-ee/charts/prometheus/templates/node-exporter-service.yaml

---
# Source: gloo-ee/charts/prometheus/templates/node-exporter-serviceaccount.yaml

---
# Source: gloo-ee/charts/prometheus/templates/pushgateway-deployment.yaml


---
# Source: gloo-ee/charts/prometheus/templates/pushgateway-ingress.yaml

---
# Source: gloo-ee/charts/prometheus/templates/pushgateway-service.yaml


---
# Source: gloo-ee/charts/prometheus/templates/pushgateway-serviceaccount.yaml

---
# Source: gloo-ee/charts/prometheus/templates/server-ingress.yaml

---
# Source: gloo-ee/charts/prometheus/templates/server-networkpolicy.yaml


---
# Source: gloo-ee/charts/prometheus/templates/server-service-headless.yaml

---
# Source: gloo-ee/charts/prometheus/templates/server-statefulset.yaml


---
# Source: gloo-ee/templates/23-extauth-upstream.yaml

---
apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  labels:
    app: gloo
    gloo: extauth
  name: extauth
  namespace: gloo-system
spec:
  upstreamSpec:
    use_http2: true
    healthChecks:
    - timeout: 5s
      interval: 1m
      unhealthyThreshold: 5
      healthyThreshold: 5
      grpcHealthCheck:
        serviceName: ext-auth
    kube:
      serviceName: extauth
      serviceNamespace: gloo-system
      servicePort:  8083
      serviceSpec:
        grpc: {}

---
# Source: gloo-ee/templates/4-ratelimit-upstream.yaml

apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  labels:
    app: gloo
    gloo: rate-limit
  name: rate-limit
  namespace: gloo-system
spec:
  upstreamSpec:
    healthChecks:
    - timeout: 5s
      interval: 1m
      unhealthyThreshold: 5
      healthyThreshold: 5
      grpcHealthCheck:
        serviceName: ratelimit
    kube:
      serviceName: rate-limit
      serviceNamespace: gloo-system
      servicePort:  18081
      serviceSpec:
        grpc: {}
---
# Source: gloo-ee/charts/gloo/templates/5-gateway-validation-webhook-configuration.yaml

apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: gloo-gateway-validation-webhook-gloo-system
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # should come before cert-gen job
webhooks:
  - name: gateway.gloo-system.svc  # must be a domain with at least three segments separated by dots
    clientConfig:
      service:
        name: gateway
        namespace: gloo-system
        path: "/validation"
      caBundle: "" # update manually or use certgen job
    rules:
      - operations: [ "CREATE", "UPDATE", "DELETE" ]
        apiGroups: ["gateway.solo.io", "gateway.solo.io.v2"]
        apiVersions: ["v1", "v2"]
        resources: ["*"]
    failurePolicy: Ignore